// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../objetos/VendaObj.dart';
import '../objetos/artigoObj.dart';
import '../objetos/categoriaObj.dart';
import '../objetos/clienteObj.dart';
import '../objetos/impressoraObj.dart';
import '../objetos/localObj.dart';
import '../objetos/metodoPagamentoObj.dart';
import '../objetos/pedidoObj.dart';
import '../objetos/setupObj.dart';
import '../objetos/turnoObj.dart';
import '../objetos/utilizadorObj.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3191427397601551436),
      name: 'Artigo',
      lastPropertyId: const obx_int.IdUid(19, 6647574119315711060),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8100061187814830515),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7490721058486202145),
            name: 'referencia',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1985335769611045271),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5596711480341129763),
            name: 'barCod',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6861233568490127938),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7435185830802118236),
            name: 'productType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3406409228919577783),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8034174130524508962),
            name: 'unitPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3448841899088094757),
            name: 'idTaxes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6668496038161365638),
            name: 'taxPrecentage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3321413912172968322),
            name: 'taxName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8101927225884580375),
            name: 'taxDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4929507131458561628),
            name: 'idRetention',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1155123289016320138),
            name: 'retentionPercentage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1431144779497111513),
            name: 'retentionName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 581257936241306090),
            name: 'stock',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 9118405432975613389),
            name: 'observacoes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 6647574119315711060),
            name: 'idArticlesCategories',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5583956632136704967),
      name: 'Categoria',
      lastPropertyId: const obx_int.IdUid(5, 2143340461393527343),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4968895184744523969),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5186778276475480054),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 248064170236266345),
            name: 'nomeCurto',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1855846717063499664),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2143340461393527343),
            name: 'nrArtigos',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3291211985064249028),
      name: 'LocalObj',
      lastPropertyId: const obx_int.IdUid(2, 8603684169517755335),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6946334239615026495),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8603684169517755335),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7104298556461174362),
      name: 'PedidoObj',
      lastPropertyId: const obx_int.IdUid(10, 1235578495373841915),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5758938227539770021),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1012013142213818343),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4287944465857653243),
            name: 'hora',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7039800546900743210),
            name: 'total',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7515691703509998257),
            name: 'nrArtigos',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2429853234783222043),
            name: 'localId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4448781442125381080),
            name: 'artigosPedidoIds',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1484090413830281754),
            name: 'funcionarioID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1235578495373841915),
            name: 'clienteID',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 764650263908402594),
            name: 'artigosPedido',
            targetId: const obx_int.IdUid(1, 3191427397601551436))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6422666133805705485),
      name: 'Utilizador',
      lastPropertyId: const obx_int.IdUid(3, 2484477567318182640),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2874757383010796151),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 381916233866981134),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2484477567318182640),
            name: 'pin',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 6051910675640835218),
      name: 'TurnoObj',
      lastPropertyId: const obx_int.IdUid(23, 7909175669971041779),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6200953183860202611),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3273047033162630490),
            name: 'turnoAberto',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1015650084272483863),
            name: 'horaAbertura',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8883016283833285187),
            name: 'horaFecho',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3796804986577443379),
            name: 'vendasBrutas',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5419248214733878988),
            name: 'reembolsos',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3726933242164990486),
            name: 'descontos',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3443008092730262250),
            name: 'vendasliquidas',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4599961517436732703),
            name: 'dinheiroInicial',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4915434816181742842),
            name: 'pagamentosDinheiro',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 9117835889598092967),
            name: 'suprimento',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1699574406241916572),
            name: 'sangria',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1650460555655926648),
            name: 'dinheiroEsperado',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2922750027210177741),
            name: 'funcionarioID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 2585488299434047412),
            name: 'reembolsosDinheiro',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 969872590487839664),
      name: 'VendaObj',
      lastPropertyId: const obx_int.IdUid(9, 5990566734231644172),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5586454065799306017),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5831161548504895327),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7108134227286749339),
            name: 'hora',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1290201078143149856),
            name: 'artigosPedidoIds',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4625249791527296432),
            name: 'funcionarioID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2644627847431001127),
            name: 'localId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4661694662445500609),
            name: 'total',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4453366980173806972),
            name: 'nrArtigos',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5990566734231644172),
            name: 'anulada',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 5421798492171887830),
      name: 'SetupObj',
      lastPropertyId: const obx_int.IdUid(18, 9140654380790352588),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1835574051051359056),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2465461869621417275),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1579373199494922195),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3448898297087257404),
            name: 'lojaID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2711181695648042740),
            name: 'nomeLoja',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5581184635745795356),
            name: 'posID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2840280473894480183),
            name: 'pos',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7502764982237474806),
            name: 'faturacaoID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4528516706774814468),
            name: 'faturacao',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4911513808943929232),
            name: 'reembolsoID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 99994130428993219),
            name: 'reembolso',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8843531822093028952),
            name: 'contaCorrenteID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6749323647515317920),
            name: 'contaCorrente',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3611576054806822963),
            name: 'imprimir',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1911982912368214324),
            name: 'email',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 6196846570544367772),
            name: 'notaCredito',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 9140654380790352588),
            name: 'funcionarioId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 8591189250015938569),
      name: 'ClienteObj',
      lastPropertyId: const obx_int.IdUid(10, 1208350643217085365),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 602345723904084332),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 747994993186910857),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4838610927381324963),
            name: 'NIF',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7059410636991576450),
            name: 'country',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8311072654930591514),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8646143015779655074),
            name: 'postcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4866173021787565114),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4005168044020356193),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6687279873876679783),
            name: 'phone',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1208350643217085365),
            name: 'obeservations',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 9134296771102256354),
      name: 'MetodoPagamentoObj',
      lastPropertyId: const obx_int.IdUid(3, 4352070940926087825),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2335736288636376692),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3798163338722494379),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4352070940926087825),
            name: 'valor',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 7876964514982937286),
      name: 'ImpressoraObj',
      lastPropertyId: const obx_int.IdUid(4, 6111044580795165338),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2001770326559077686),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2468479007092347046),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9039751828394950964),
            name: 'iP',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6111044580795165338),
            name: 'port',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(14, 7876964514982937286),
      lastIndexId: const obx_int.IdUid(1, 2709143836952813707),
      lastRelationId: const obx_int.IdUid(2, 764650263908402594),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        4772283387577696936,
        2030655850358947858,
        760885638717546983
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5920608008104397494,
        3408471008171598888,
        4620978447039160973,
        1523034204437704542,
        7628756088963777523,
        4348102591809595840,
        6539675531570823517,
        2891275562117548631,
        7552558037840988166,
        2792818346677926916,
        260075754396814068,
        7585348376496159755,
        4707725486126072595,
        2668378425142982470,
        4142978399308346823,
        1262283674318796450,
        6054098541531560331,
        5566946018571818589,
        1809128679097544643,
        1330753141360703355,
        2708372927138612788,
        3672436035991890288,
        6556494904146860720,
        6931124628946287980,
        3284798698106748045,
        3169776483276987781,
        8488742810161187612,
        7909175669971041779,
        7760452733796280113,
        5732034200910664457,
        1685756764194169679,
        9072606405762854221
      ],
      retiredRelationUids: const [7466652304049170735],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Artigo: obx_int.EntityDefinition<Artigo>(
        model: _entities[0],
        toOneRelations: (Artigo object) => [],
        toManyRelations: (Artigo object) => {},
        getId: (Artigo object) => object.id,
        setId: (Artigo object, int id) {
          object.id = id;
        },
        objectToFB: (Artigo object, fb.Builder fbb) {
          final referenciaOffset = fbb.writeString(object.referencia);
          final nomeOffset = fbb.writeString(object.nome);
          final barCodOffset = fbb.writeString(object.barCod);
          final descriptionOffset = fbb.writeString(object.description);
          final productTypeOffset = fbb.writeString(object.productType);
          final taxNameOffset = fbb.writeString(object.taxName);
          final taxDescriptionOffset = fbb.writeString(object.taxDescription);
          final retentionNameOffset = fbb.writeString(object.retentionName);
          final observacoesOffset = fbb.writeString(object.observacoes);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, referenciaOffset);
          fbb.addOffset(2, nomeOffset);
          fbb.addOffset(3, barCodOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, productTypeOffset);
          fbb.addFloat64(6, object.price);
          fbb.addFloat64(7, object.unitPrice);
          fbb.addInt64(9, object.idTaxes);
          fbb.addInt64(10, object.taxPrecentage);
          fbb.addOffset(11, taxNameOffset);
          fbb.addOffset(12, taxDescriptionOffset);
          fbb.addInt64(13, object.idRetention);
          fbb.addInt64(14, object.retentionPercentage);
          fbb.addOffset(15, retentionNameOffset);
          fbb.addInt64(16, object.stock);
          fbb.addOffset(17, observacoesOffset);
          fbb.addInt64(18, object.idArticlesCategories);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final referenciaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final barCodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final productTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final unitPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final idTaxesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final taxPrecentageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final taxNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final taxDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final idRetentionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final retentionPercentageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final retentionNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final stockParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final idArticlesCategoriesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final object = Artigo(
              referencia: referenciaParam,
              nome: nomeParam,
              barCod: barCodParam,
              description: descriptionParam,
              productType: productTypeParam,
              unitPrice: unitPriceParam,
              idTaxes: idTaxesParam,
              taxPrecentage: taxPrecentageParam,
              taxName: taxNameParam,
              taxDescription: taxDescriptionParam,
              idRetention: idRetentionParam,
              retentionPercentage: retentionPercentageParam,
              retentionName: retentionNameParam,
              stock: stockParam,
              idArticlesCategories: idArticlesCategoriesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..price =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..observacoes = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 38, '');

          return object;
        }),
    Categoria: obx_int.EntityDefinition<Categoria>(
        model: _entities[1],
        toOneRelations: (Categoria object) => [],
        toManyRelations: (Categoria object) => {},
        getId: (Categoria object) => object.id,
        setId: (Categoria object, int id) {
          object.id = id;
        },
        objectToFB: (Categoria object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final nomeCurtoOffset = fbb.writeString(object.nomeCurto);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, nomeCurtoOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.nrArtigos);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nomeCurtoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = Categoria(
              nome: nomeParam,
              nomeCurto: nomeCurtoParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..nrArtigos =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);

          return object;
        }),
    LocalObj: obx_int.EntityDefinition<LocalObj>(
        model: _entities[2],
        toOneRelations: (LocalObj object) => [],
        toManyRelations: (LocalObj object) => {},
        getId: (LocalObj object) => object.id,
        setId: (LocalObj object, int id) {
          object.id = id;
        },
        objectToFB: (LocalObj object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = LocalObj(nomeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PedidoObj: obx_int.EntityDefinition<PedidoObj>(
        model: _entities[3],
        toOneRelations: (PedidoObj object) => [],
        toManyRelations: (PedidoObj object) => {
              obx_int.RelInfo<PedidoObj>.toMany(2, object.id):
                  object.artigosPedido
            },
        getId: (PedidoObj object) => object.id,
        setId: (PedidoObj object, int id) {
          object.id = id;
        },
        objectToFB: (PedidoObj object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final artigosPedidoIdsOffset =
              fbb.writeListInt64(object.artigosPedidoIds);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addInt64(2, object.hora.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.total);
          fbb.addInt64(4, object.nrArtigos);
          fbb.addInt64(6, object.localId);
          fbb.addOffset(7, artigosPedidoIdsOffset);
          fbb.addInt64(8, object.funcionarioID);
          fbb.addInt64(9, object.clienteID);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final horaParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final funcionarioIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final clienteIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final localIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final totalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = PedidoObj(
              nome: nomeParam,
              hora: horaParam,
              funcionarioID: funcionarioIDParam,
              clienteID: clienteIDParam,
              localId: localIdParam,
              total: totalParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..nrArtigos =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..artigosPedidoIds =
                const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                    .vTableGet(buffer, rootOffset, 18, []);
          obx_int.InternalToManyAccess.setRelInfo<PedidoObj>(
              object.artigosPedido,
              store,
              obx_int.RelInfo<PedidoObj>.toMany(2, object.id));
          return object;
        }),
    Utilizador: obx_int.EntityDefinition<Utilizador>(
        model: _entities[4],
        toOneRelations: (Utilizador object) => [],
        toManyRelations: (Utilizador object) => {},
        getId: (Utilizador object) => object.id,
        setId: (Utilizador object, int id) {
          object.id = id;
        },
        objectToFB: (Utilizador object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addInt64(2, object.pin);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pinParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = Utilizador(nomeParam, pinParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    TurnoObj: obx_int.EntityDefinition<TurnoObj>(
        model: _entities[5],
        toOneRelations: (TurnoObj object) => [],
        toManyRelations: (TurnoObj object) => {},
        getId: (TurnoObj object) => object.id,
        setId: (TurnoObj object, int id) {
          object.id = id;
        },
        objectToFB: (TurnoObj object, fb.Builder fbb) {
          fbb.startTable(24);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.turnoAberto);
          fbb.addInt64(2, object.horaAbertura.millisecondsSinceEpoch);
          fbb.addInt64(3, object.horaFecho.millisecondsSinceEpoch);
          fbb.addFloat64(4, object.vendasBrutas);
          fbb.addFloat64(5, object.reembolsos);
          fbb.addFloat64(6, object.descontos);
          fbb.addFloat64(7, object.vendasliquidas);
          fbb.addFloat64(11, object.dinheiroInicial);
          fbb.addFloat64(12, object.pagamentosDinheiro);
          fbb.addFloat64(13, object.suprimento);
          fbb.addFloat64(14, object.sangria);
          fbb.addFloat64(15, object.dinheiroEsperado);
          fbb.addInt64(16, object.funcionarioID);
          fbb.addFloat64(17, object.reembolsosDinheiro);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TurnoObj()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..turnoAberto =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..horaAbertura = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..horaFecho = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..vendasBrutas =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..reembolsos =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..descontos =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..vendasliquidas =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..dinheiroInicial =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0)
            ..pagamentosDinheiro =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0)
            ..suprimento =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0)
            ..sangria =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0)
            ..dinheiroEsperado =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0)
            ..funcionarioID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0)
            ..reembolsosDinheiro =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0);

          return object;
        }),
    VendaObj: obx_int.EntityDefinition<VendaObj>(
        model: _entities[6],
        toOneRelations: (VendaObj object) => [],
        toManyRelations: (VendaObj object) => {},
        getId: (VendaObj object) => object.id,
        setId: (VendaObj object, int id) {
          object.id = id;
        },
        objectToFB: (VendaObj object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final artigosPedidoIdsOffset =
              fbb.writeListInt64(object.artigosPedidoIds);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addInt64(2, object.hora.millisecondsSinceEpoch);
          fbb.addOffset(3, artigosPedidoIdsOffset);
          fbb.addInt64(4, object.funcionarioID);
          fbb.addInt64(5, object.localId);
          fbb.addFloat64(6, object.total);
          fbb.addInt64(7, object.nrArtigos);
          fbb.addBool(8, object.anulada);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final horaParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final funcionarioIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final localIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final totalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = VendaObj(
              nome: nomeParam,
              hora: horaParam,
              funcionarioID: funcionarioIDParam,
              localId: localIdParam,
              total: totalParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..artigosPedidoIds =
                const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                    .vTableGet(buffer, rootOffset, 10, [])
            ..nrArtigos =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..anulada =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);

          return object;
        }),
    SetupObj: obx_int.EntityDefinition<SetupObj>(
        model: _entities[7],
        toOneRelations: (SetupObj object) => [],
        toManyRelations: (SetupObj object) => {},
        getId: (SetupObj object) => object.id,
        setId: (SetupObj object, int id) {
          object.id = id;
        },
        objectToFB: (SetupObj object, fb.Builder fbb) {
          final urlOffset = fbb.writeString(object.url);
          final passwordOffset = fbb.writeString(object.password);
          final nomeLojaOffset = fbb.writeString(object.nomeLoja);
          final posOffset = fbb.writeString(object.pos);
          final faturacaoOffset = fbb.writeString(object.faturacao);
          final reembolsoOffset = fbb.writeString(object.reembolso);
          final contaCorrenteOffset = fbb.writeString(object.contaCorrente);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addInt64(3, object.lojaID);
          fbb.addOffset(4, nomeLojaOffset);
          fbb.addInt64(5, object.posID);
          fbb.addOffset(6, posOffset);
          fbb.addInt64(8, object.faturacaoID);
          fbb.addOffset(9, faturacaoOffset);
          fbb.addInt64(10, object.reembolsoID);
          fbb.addOffset(11, reembolsoOffset);
          fbb.addInt64(12, object.contaCorrenteID);
          fbb.addOffset(13, contaCorrenteOffset);
          fbb.addBool(14, object.imprimir);
          fbb.addBool(15, object.email);
          fbb.addBool(16, object.notaCredito);
          fbb.addInt64(17, object.funcionarioId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SetupObj()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..url = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..lojaID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..nomeLoja = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..posID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..pos = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..faturacaoID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..faturacao = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..reembolsoID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
            ..reembolso = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 26, '')
            ..contaCorrenteID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0)
            ..contaCorrente = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '')
            ..imprimir =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false)
            ..email =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false)
            ..notaCredito =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false)
            ..funcionarioId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);

          return object;
        }),
    ClienteObj: obx_int.EntityDefinition<ClienteObj>(
        model: _entities[8],
        toOneRelations: (ClienteObj object) => [],
        toManyRelations: (ClienteObj object) => {},
        getId: (ClienteObj object) => object.id,
        setId: (ClienteObj object, int id) {
          object.id = id;
        },
        objectToFB: (ClienteObj object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final countryOffset = fbb.writeString(object.country);
          final addressOffset = fbb.writeString(object.address);
          final postcodeOffset = fbb.writeString(object.postcode);
          final cityOffset = fbb.writeString(object.city);
          final emailOffset = fbb.writeString(object.email);
          final obeservationsOffset = fbb.writeString(object.obeservations);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addInt64(2, object.NIF);
          fbb.addOffset(3, countryOffset);
          fbb.addOffset(4, addressOffset);
          fbb.addOffset(5, postcodeOffset);
          fbb.addOffset(6, cityOffset);
          fbb.addOffset(7, emailOffset);
          fbb.addInt64(8, object.phone);
          fbb.addOffset(9, obeservationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final NIFParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final postcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final phoneParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final obeservationsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final object = ClienteObj(
              nomeParam,
              NIFParam,
              countryParam,
              addressParam,
              postcodeParam,
              cityParam,
              emailParam,
              phoneParam,
              obeservationsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MetodoPagamentoObj: obx_int.EntityDefinition<MetodoPagamentoObj>(
        model: _entities[9],
        toOneRelations: (MetodoPagamentoObj object) => [],
        toManyRelations: (MetodoPagamentoObj object) => {},
        getId: (MetodoPagamentoObj object) => object.id,
        setId: (MetodoPagamentoObj object, int id) {
          object.id = id;
        },
        objectToFB: (MetodoPagamentoObj object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addFloat64(2, object.valor);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valorParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = MetodoPagamentoObj(nomeParam, valorParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ImpressoraObj: obx_int.EntityDefinition<ImpressoraObj>(
        model: _entities[10],
        toOneRelations: (ImpressoraObj object) => [],
        toManyRelations: (ImpressoraObj object) => {},
        getId: (ImpressoraObj object) => object.id,
        setId: (ImpressoraObj object, int id) {
          object.id = id;
        },
        objectToFB: (ImpressoraObj object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final iPOffset = fbb.writeString(object.iP);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, iPOffset);
          fbb.addInt64(3, object.port);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final iPParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final portParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = ImpressoraObj(nomeParam, iPParam, portParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Artigo] entity fields to define ObjectBox queries.
class Artigo_ {
  /// see [Artigo.id]
  static final id =
      obx.QueryIntegerProperty<Artigo>(_entities[0].properties[0]);

  /// see [Artigo.referencia]
  static final referencia =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[1]);

  /// see [Artigo.nome]
  static final nome =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[2]);

  /// see [Artigo.barCod]
  static final barCod =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[3]);

  /// see [Artigo.description]
  static final description =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[4]);

  /// see [Artigo.productType]
  static final productType =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[5]);

  /// see [Artigo.price]
  static final price =
      obx.QueryDoubleProperty<Artigo>(_entities[0].properties[6]);

  /// see [Artigo.unitPrice]
  static final unitPrice =
      obx.QueryDoubleProperty<Artigo>(_entities[0].properties[7]);

  /// see [Artigo.idTaxes]
  static final idTaxes =
      obx.QueryIntegerProperty<Artigo>(_entities[0].properties[8]);

  /// see [Artigo.taxPrecentage]
  static final taxPrecentage =
      obx.QueryIntegerProperty<Artigo>(_entities[0].properties[9]);

  /// see [Artigo.taxName]
  static final taxName =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[10]);

  /// see [Artigo.taxDescription]
  static final taxDescription =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[11]);

  /// see [Artigo.idRetention]
  static final idRetention =
      obx.QueryIntegerProperty<Artigo>(_entities[0].properties[12]);

  /// see [Artigo.retentionPercentage]
  static final retentionPercentage =
      obx.QueryIntegerProperty<Artigo>(_entities[0].properties[13]);

  /// see [Artigo.retentionName]
  static final retentionName =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[14]);

  /// see [Artigo.stock]
  static final stock =
      obx.QueryIntegerProperty<Artigo>(_entities[0].properties[15]);

  /// see [Artigo.observacoes]
  static final observacoes =
      obx.QueryStringProperty<Artigo>(_entities[0].properties[16]);

  /// see [Artigo.idArticlesCategories]
  static final idArticlesCategories =
      obx.QueryIntegerProperty<Artigo>(_entities[0].properties[17]);
}

/// [Categoria] entity fields to define ObjectBox queries.
class Categoria_ {
  /// see [Categoria.id]
  static final id =
      obx.QueryIntegerProperty<Categoria>(_entities[1].properties[0]);

  /// see [Categoria.nome]
  static final nome =
      obx.QueryStringProperty<Categoria>(_entities[1].properties[1]);

  /// see [Categoria.nomeCurto]
  static final nomeCurto =
      obx.QueryStringProperty<Categoria>(_entities[1].properties[2]);

  /// see [Categoria.description]
  static final description =
      obx.QueryStringProperty<Categoria>(_entities[1].properties[3]);

  /// see [Categoria.nrArtigos]
  static final nrArtigos =
      obx.QueryIntegerProperty<Categoria>(_entities[1].properties[4]);
}

/// [LocalObj] entity fields to define ObjectBox queries.
class LocalObj_ {
  /// see [LocalObj.id]
  static final id =
      obx.QueryIntegerProperty<LocalObj>(_entities[2].properties[0]);

  /// see [LocalObj.nome]
  static final nome =
      obx.QueryStringProperty<LocalObj>(_entities[2].properties[1]);
}

/// [PedidoObj] entity fields to define ObjectBox queries.
class PedidoObj_ {
  /// see [PedidoObj.id]
  static final id =
      obx.QueryIntegerProperty<PedidoObj>(_entities[3].properties[0]);

  /// see [PedidoObj.nome]
  static final nome =
      obx.QueryStringProperty<PedidoObj>(_entities[3].properties[1]);

  /// see [PedidoObj.hora]
  static final hora =
      obx.QueryDateProperty<PedidoObj>(_entities[3].properties[2]);

  /// see [PedidoObj.total]
  static final total =
      obx.QueryDoubleProperty<PedidoObj>(_entities[3].properties[3]);

  /// see [PedidoObj.nrArtigos]
  static final nrArtigos =
      obx.QueryIntegerProperty<PedidoObj>(_entities[3].properties[4]);

  /// see [PedidoObj.localId]
  static final localId =
      obx.QueryIntegerProperty<PedidoObj>(_entities[3].properties[5]);

  /// see [PedidoObj.artigosPedidoIds]
  static final artigosPedidoIds =
      obx.QueryIntegerVectorProperty<PedidoObj>(_entities[3].properties[6]);

  /// see [PedidoObj.funcionarioID]
  static final funcionarioID =
      obx.QueryIntegerProperty<PedidoObj>(_entities[3].properties[7]);

  /// see [PedidoObj.clienteID]
  static final clienteID =
      obx.QueryIntegerProperty<PedidoObj>(_entities[3].properties[8]);

  /// see [PedidoObj.artigosPedido]
  static final artigosPedido =
      obx.QueryRelationToMany<PedidoObj, Artigo>(_entities[3].relations[0]);
}

/// [Utilizador] entity fields to define ObjectBox queries.
class Utilizador_ {
  /// see [Utilizador.id]
  static final id =
      obx.QueryIntegerProperty<Utilizador>(_entities[4].properties[0]);

  /// see [Utilizador.nome]
  static final nome =
      obx.QueryStringProperty<Utilizador>(_entities[4].properties[1]);

  /// see [Utilizador.pin]
  static final pin =
      obx.QueryIntegerProperty<Utilizador>(_entities[4].properties[2]);
}

/// [TurnoObj] entity fields to define ObjectBox queries.
class TurnoObj_ {
  /// see [TurnoObj.id]
  static final id =
      obx.QueryIntegerProperty<TurnoObj>(_entities[5].properties[0]);

  /// see [TurnoObj.turnoAberto]
  static final turnoAberto =
      obx.QueryBooleanProperty<TurnoObj>(_entities[5].properties[1]);

  /// see [TurnoObj.horaAbertura]
  static final horaAbertura =
      obx.QueryDateProperty<TurnoObj>(_entities[5].properties[2]);

  /// see [TurnoObj.horaFecho]
  static final horaFecho =
      obx.QueryDateProperty<TurnoObj>(_entities[5].properties[3]);

  /// see [TurnoObj.vendasBrutas]
  static final vendasBrutas =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[4]);

  /// see [TurnoObj.reembolsos]
  static final reembolsos =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[5]);

  /// see [TurnoObj.descontos]
  static final descontos =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[6]);

  /// see [TurnoObj.vendasliquidas]
  static final vendasliquidas =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[7]);

  /// see [TurnoObj.dinheiroInicial]
  static final dinheiroInicial =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[8]);

  /// see [TurnoObj.pagamentosDinheiro]
  static final pagamentosDinheiro =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[9]);

  /// see [TurnoObj.suprimento]
  static final suprimento =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[10]);

  /// see [TurnoObj.sangria]
  static final sangria =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[11]);

  /// see [TurnoObj.dinheiroEsperado]
  static final dinheiroEsperado =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[12]);

  /// see [TurnoObj.funcionarioID]
  static final funcionarioID =
      obx.QueryIntegerProperty<TurnoObj>(_entities[5].properties[13]);

  /// see [TurnoObj.reembolsosDinheiro]
  static final reembolsosDinheiro =
      obx.QueryDoubleProperty<TurnoObj>(_entities[5].properties[14]);
}

/// [VendaObj] entity fields to define ObjectBox queries.
class VendaObj_ {
  /// see [VendaObj.id]
  static final id =
      obx.QueryIntegerProperty<VendaObj>(_entities[6].properties[0]);

  /// see [VendaObj.nome]
  static final nome =
      obx.QueryStringProperty<VendaObj>(_entities[6].properties[1]);

  /// see [VendaObj.hora]
  static final hora =
      obx.QueryDateProperty<VendaObj>(_entities[6].properties[2]);

  /// see [VendaObj.artigosPedidoIds]
  static final artigosPedidoIds =
      obx.QueryIntegerVectorProperty<VendaObj>(_entities[6].properties[3]);

  /// see [VendaObj.funcionarioID]
  static final funcionarioID =
      obx.QueryIntegerProperty<VendaObj>(_entities[6].properties[4]);

  /// see [VendaObj.localId]
  static final localId =
      obx.QueryIntegerProperty<VendaObj>(_entities[6].properties[5]);

  /// see [VendaObj.total]
  static final total =
      obx.QueryDoubleProperty<VendaObj>(_entities[6].properties[6]);

  /// see [VendaObj.nrArtigos]
  static final nrArtigos =
      obx.QueryIntegerProperty<VendaObj>(_entities[6].properties[7]);

  /// see [VendaObj.anulada]
  static final anulada =
      obx.QueryBooleanProperty<VendaObj>(_entities[6].properties[8]);
}

/// [SetupObj] entity fields to define ObjectBox queries.
class SetupObj_ {
  /// see [SetupObj.id]
  static final id =
      obx.QueryIntegerProperty<SetupObj>(_entities[7].properties[0]);

  /// see [SetupObj.url]
  static final url =
      obx.QueryStringProperty<SetupObj>(_entities[7].properties[1]);

  /// see [SetupObj.password]
  static final password =
      obx.QueryStringProperty<SetupObj>(_entities[7].properties[2]);

  /// see [SetupObj.lojaID]
  static final lojaID =
      obx.QueryIntegerProperty<SetupObj>(_entities[7].properties[3]);

  /// see [SetupObj.nomeLoja]
  static final nomeLoja =
      obx.QueryStringProperty<SetupObj>(_entities[7].properties[4]);

  /// see [SetupObj.posID]
  static final posID =
      obx.QueryIntegerProperty<SetupObj>(_entities[7].properties[5]);

  /// see [SetupObj.pos]
  static final pos =
      obx.QueryStringProperty<SetupObj>(_entities[7].properties[6]);

  /// see [SetupObj.faturacaoID]
  static final faturacaoID =
      obx.QueryIntegerProperty<SetupObj>(_entities[7].properties[7]);

  /// see [SetupObj.faturacao]
  static final faturacao =
      obx.QueryStringProperty<SetupObj>(_entities[7].properties[8]);

  /// see [SetupObj.reembolsoID]
  static final reembolsoID =
      obx.QueryIntegerProperty<SetupObj>(_entities[7].properties[9]);

  /// see [SetupObj.reembolso]
  static final reembolso =
      obx.QueryStringProperty<SetupObj>(_entities[7].properties[10]);

  /// see [SetupObj.contaCorrenteID]
  static final contaCorrenteID =
      obx.QueryIntegerProperty<SetupObj>(_entities[7].properties[11]);

  /// see [SetupObj.contaCorrente]
  static final contaCorrente =
      obx.QueryStringProperty<SetupObj>(_entities[7].properties[12]);

  /// see [SetupObj.imprimir]
  static final imprimir =
      obx.QueryBooleanProperty<SetupObj>(_entities[7].properties[13]);

  /// see [SetupObj.email]
  static final email =
      obx.QueryBooleanProperty<SetupObj>(_entities[7].properties[14]);

  /// see [SetupObj.notaCredito]
  static final notaCredito =
      obx.QueryBooleanProperty<SetupObj>(_entities[7].properties[15]);

  /// see [SetupObj.funcionarioId]
  static final funcionarioId =
      obx.QueryIntegerProperty<SetupObj>(_entities[7].properties[16]);
}

/// [ClienteObj] entity fields to define ObjectBox queries.
class ClienteObj_ {
  /// see [ClienteObj.id]
  static final id =
      obx.QueryIntegerProperty<ClienteObj>(_entities[8].properties[0]);

  /// see [ClienteObj.nome]
  static final nome =
      obx.QueryStringProperty<ClienteObj>(_entities[8].properties[1]);

  /// see [ClienteObj.NIF]
  static final NIF =
      obx.QueryIntegerProperty<ClienteObj>(_entities[8].properties[2]);

  /// see [ClienteObj.country]
  static final country =
      obx.QueryStringProperty<ClienteObj>(_entities[8].properties[3]);

  /// see [ClienteObj.address]
  static final address =
      obx.QueryStringProperty<ClienteObj>(_entities[8].properties[4]);

  /// see [ClienteObj.postcode]
  static final postcode =
      obx.QueryStringProperty<ClienteObj>(_entities[8].properties[5]);

  /// see [ClienteObj.city]
  static final city =
      obx.QueryStringProperty<ClienteObj>(_entities[8].properties[6]);

  /// see [ClienteObj.email]
  static final email =
      obx.QueryStringProperty<ClienteObj>(_entities[8].properties[7]);

  /// see [ClienteObj.phone]
  static final phone =
      obx.QueryIntegerProperty<ClienteObj>(_entities[8].properties[8]);

  /// see [ClienteObj.obeservations]
  static final obeservations =
      obx.QueryStringProperty<ClienteObj>(_entities[8].properties[9]);
}

/// [MetodoPagamentoObj] entity fields to define ObjectBox queries.
class MetodoPagamentoObj_ {
  /// see [MetodoPagamentoObj.id]
  static final id =
      obx.QueryIntegerProperty<MetodoPagamentoObj>(_entities[9].properties[0]);

  /// see [MetodoPagamentoObj.nome]
  static final nome =
      obx.QueryStringProperty<MetodoPagamentoObj>(_entities[9].properties[1]);

  /// see [MetodoPagamentoObj.valor]
  static final valor =
      obx.QueryDoubleProperty<MetodoPagamentoObj>(_entities[9].properties[2]);
}

/// [ImpressoraObj] entity fields to define ObjectBox queries.
class ImpressoraObj_ {
  /// see [ImpressoraObj.id]
  static final id =
      obx.QueryIntegerProperty<ImpressoraObj>(_entities[10].properties[0]);

  /// see [ImpressoraObj.nome]
  static final nome =
      obx.QueryStringProperty<ImpressoraObj>(_entities[10].properties[1]);

  /// see [ImpressoraObj.iP]
  static final iP =
      obx.QueryStringProperty<ImpressoraObj>(_entities[10].properties[2]);

  /// see [ImpressoraObj.port]
  static final port =
      obx.QueryIntegerProperty<ImpressoraObj>(_entities[10].properties[3]);
}
